name: CI – Build WebGL

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    # só dispara se tiver “BUILD” em maiúsculas
    if: >
      ( github.event_name == 'push' &&
        ( startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/dev') ) &&
        contains(github.event.head_commit.message, 'BUILD') &&
        !contains(github.event.head_commit.message, 'build')
      )
      ||
      ( github.event_name == 'pull_request' &&
        contains(github.event.pull_request.title, 'BUILD') &&
        !contains(github.event.pull_request.title, 'build')
      )

    # define ambiente automático
    env:
      ENVIRONMENT: ${{ github.event_name == 'pull_request' && 'qa' || github.ref_name == 'dev' && 'dev' || github.ref_name == 'main' && 'prod' || 'unknown' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        shell: bash
        run: |
          git fetch --prune --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "$LAST_TAG" = "v0.0.0" ]; then RANGE="HEAD"; else RANGE="$LAST_TAG..HEAD"; fi
          IDS_FRJ=( $(git log "$RANGE" --grep 'FRJ-' --pretty=%s \
                    | grep -o 'FRJ-[0-9]\+' || true | sort -u) )
          IDS_SUS=( $(git log "$RANGE" --grep 'SUS-' --pretty=%s \
                    | grep -o 'SUS-[0-9]\+' || true | sort -u) )
          COUNT_FRJ=${#IDS_FRJ[@]}
          COUNT_SUS=${#IDS_SUS[@]}
          SHORT_COMMIT=$(git rev-parse --short HEAD)
          SUMMARY="$LAST_TAG-${ENVIRONMENT}+f${COUNT_FRJ}s${COUNT_SUS}"
          KEY="$SUMMARY-h$SHORT_COMMIT"
          echo "FULL_VERSION_SUMMARY=$SUMMARY" >> $GITHUB_ENV
          echo "FULL_VERSION_KEY=$KEY"         >> $GITHUB_ENV

      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ runner.os }}-unity-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            ${{ runner.os }}-unity-

      - name: Write version into StreamingAssets as JSON
        shell: bash
        run: |
          mkdir -p Assets/StreamingAssets
          cat <<EOF > Assets/StreamingAssets/version.json
          {
            "summary": "${FULL_VERSION_SUMMARY}",
            "key":     "${FULL_VERSION_KEY}"
          }
          EOF

      - name: Build WebGL
        uses: game-ci/unity-builder@v4
        env:
          HOME:           /github/home
          UNITY_LICENSE:  ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:    ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion:    2022.3.61f1
          targetPlatform:  WebGL
          projectPath:     .
          buildName:       WebGL
          runAsHostUser:   true
          allowDirtyBuild: true

      - name: Upload WebGL artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FULL_VERSION_KEY }}
          path: build/WebGL
